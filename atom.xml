<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[M. Cenk Ayberkin]]></title>
  <link href="http://cenkayberkin.github.io/atom.xml" rel="self"/>
  <link href="http://cenkayberkin.github.io/"/>
  <updated>2014-10-19T19:40:57-07:00</updated>
  <id>http://cenkayberkin.github.io/</id>
  <author>
    <name><![CDATA[M. Cenk Ayberkin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby meta programming]]></title>
    <link href="http://cenkayberkin.github.io/blog/2014/10/15/ruby-meta-programming/"/>
    <updated>2014-10-15T22:38:37-07:00</updated>
    <id>http://cenkayberkin.github.io/blog/2014/10/15/ruby-meta-programming</id>
    <content type="html"><![CDATA[<h1>Dynamic finder methods</h1>

<blockquote><p>The aim of this article is to explain the meta programming usage of the gem <a href="https://github.com/mitijain123/mongoid_dynamic_finder">Mongoid dynamic finder</a></p></blockquote>

<p>There are many ways to use mongodb with rails, one of them is using a gem called <a href="http://mongoid.org/en/mongoid/index.html">Mongoid</a> which will give you activerecord like usage models.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>class Artist
</span><span class='line'>  include Mongoid::Document
</span><span class='line'>  field :name, <span class="nb">type</span>: String
</span><span class='line'>  embeds_many :instruments
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'><span class="nv">syd</span> <span class="o">=</span> Artist.where<span class="o">(</span>name: <span class="s2">&quot;Syd Vicious&quot;</span><span class="o">)</span>.between<span class="o">(</span>age: 18..25<span class="o">)</span>.first
</span></code></pre></td></tr></table></div></figure>


<p>If you would like to use activerecord like dynamic finders then you&rsquo;ll have to install the gem called <a href="https://github.com/mitijain123/mongoid_dynamic_finder">Mongoid dynamic finder</a>.
Just add the gem and bundle.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Artist.find_by_name_and_title<span class="o">(</span><span class="s1">&#39;Some Artist&#39;</span> , <span class="s1">&#39;Mr.&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So how does it work? Today I&rsquo;ll explain how these dyanmic finders work by explaining the mongoid dynamic finders gem.</p>

<hr />

<h2>Where the magic happens</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>def method_missing<span class="o">(</span>method_id, *args, <span class="p">&amp;</span>block<span class="o">)</span>
</span><span class='line'>      <span class="nv">conditions</span> <span class="o">=</span> <span class="o">{}</span>
</span><span class='line'>      <span class="nv">bang</span> <span class="o">=</span> <span class="nb">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Calling the find_by_name method will end up here at method_missing because there is not a method called by that name. The method_missing method initiates the conditions hash and bang variable. Method_id will be find_by_name and arguments will be &lsquo;Some Artist&rsquo;, &lsquo;Mr.&rsquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="m">1</span>      <span class="k">case</span> method_id.to_s
</span><span class='line'><span class="m">2</span>      when /^find_<span class="o">(</span>all<span class="p">|</span>last<span class="o">||</span>first<span class="o">)</span>_?by_<span class="o">([</span>_a-zA-Z<span class="o">]</span><span class="se">\w</span>*<span class="o">)(</span>!?<span class="o">)</span><span class="nv">$/</span>
</span><span class='line'><span class="m">3</span>        <span class="nv">finder_type</span> <span class="o">=</span> <span class="nv">$1</span>.blank? ? :first : <span class="nv">$1</span>.to_sym
</span><span class='line'><span class="m">4</span>        <span class="nv">bang</span> <span class="o">=</span> <span class="nb">true </span><span class="k">if</span> <span class="nv">$3</span> <span class="o">==</span> <span class="s1">&#39;!&#39;</span>
</span><span class='line'>5
</span><span class='line'><span class="m">6</span>        <span class="nv">$2</span>.split<span class="o">(</span>/_and_/<span class="o">)</span>.each_with_index <span class="k">do</span> <span class="p">|</span>attr, i<span class="p">|</span>
</span><span class='line'><span class="m">7</span>          conditions<span class="o">[</span>attr<span class="o">]</span> <span class="o">=</span> args<span class="o">[</span>i<span class="o">]</span>
</span><span class='line'><span class="m">8</span>        end
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Line 1 turns method name to string.</li>
<li>If method_id is acceptable by the regular expression on line 2
then the regular expression parses two groups of data from the method_id (all or last). If method_id is empty then it will be assigned as :first.</li>
<li>If there is a bang at the end of the method call then the bang variable will be set to true, on line 4.</li>
<li>In order to find the conditions for find method the second part of parsing $2 will be split into an array. So if it is find_by_name_and_title
then the conditions hash will have keys name and title, their values will be the order of them.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>    <span class="nv">result</span> <span class="o">=</span> find<span class="o">(</span>finder_type, :conditions <span class="o">=</span>&gt; conditions<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the simple part: once the finder_type and conditions information is parsed then it calls the find method on the <a href="http://mongoid.org/en/mongoid/index.html">Mongoid</a> gem and saves the returned information to result.</p>

<hr />

<p><strong>Article by <a href="https://github.com/cenkayberkin">M.Cenk Ayberkin</a></strong></p>
]]></content>
  </entry>
  
</feed>
